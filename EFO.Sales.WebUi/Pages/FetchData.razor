@page "/fetchdata"
@using EFO.Sales.WebUi.Data
@inject WeatherForecastService ForecastService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (_orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <span>@_orders</span>
}

<button class="btn btn-primary" @onclick="StartOrderAsync">Click me</button>

@code {
    private WeatherForecast[]? forecasts;
    private string? _orders;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }

    private async Task StartOrderAsync()
    {
        var httpClient = new HttpClient();
        var r = await httpClient.PostAsync(new Uri("http://localhost:5182/orders"), JsonContent.Create(new { CustomerId = Guid.NewGuid() }));
        var id = await r.Content.ReadAsStringAsync();
        await LoadOrderAsync(id.Trim('\"'));
    }

    private async Task LoadOrderAsync(string id)
    {
        var httpClient = new HttpClient();
        var r = await httpClient.GetAsync(new Uri($"http://localhost:5182/orders/{id}"));
        _orders = await r.Content.ReadAsStringAsync();
    }


}
