@page "/catalog/{categoryId:guid}"
@using EFO.WebUi.Data
@inject IProductService ProductService
@inject IOrderService OrderService

<PageTitle>Catalog</PageTitle>

<h1>Select Category</h1>


@if (_products == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <ProductList Products="_products" OnProductAddToOrder="ProductList_OnProductAddToOrder"></ProductList>
}

@code
{
    [Parameter]
    public Guid CategoryId { get; set; }

    private ProductDto[]? _products;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        var products = await ProductService.GetProductsAsync(CategoryId, new Dictionary<Guid, ProductService.NumericPropertyFilter>(), new Dictionary<Guid, ProductService.TextPropertyFilter>());
        _products = products;
    }


    private async Task ProductList_OnProductAddToOrder(ProductAddedToOrderEventArgs args)
    {
        try
        {
            await OrderService.AddOrderItemAsync(new AddOrderItemDto(args.ProductId, args.Quantity));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        
    }
}